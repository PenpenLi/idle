//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Xml_Linq_XElementWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Xml.Linq.XElement), typeof(System.Xml.Linq.XContainer));
		L.RegFunction("AncestorsAndSelf", AncestorsAndSelf);
		L.RegFunction("Attribute", Attribute);
		L.RegFunction("Attributes", Attributes);
		L.RegFunction("DescendantNodesAndSelf", DescendantNodesAndSelf);
		L.RegFunction("DescendantsAndSelf", DescendantsAndSelf);
		L.RegFunction("GetDefaultNamespace", GetDefaultNamespace);
		L.RegFunction("GetNamespaceOfPrefix", GetNamespaceOfPrefix);
		L.RegFunction("GetPrefixOfNamespace", GetPrefixOfNamespace);
		L.RegFunction("Load", Load);
		L.RegFunction("Parse", Parse);
		L.RegFunction("RemoveAll", RemoveAll);
		L.RegFunction("RemoveAttributes", RemoveAttributes);
		L.RegFunction("ReplaceAll", ReplaceAll);
		L.RegFunction("ReplaceAttributes", ReplaceAttributes);
		L.RegFunction("Save", Save);
		L.RegFunction("SetAttributeValue", SetAttributeValue);
		L.RegFunction("SetElementValue", SetElementValue);
		L.RegFunction("SetValue", SetValue);
		L.RegFunction("WriteTo", WriteTo);
		L.RegFunction("New", _CreateSystem_Xml_Linq_XElement);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("EmptySequence", get_EmptySequence, null);
		L.RegVar("FirstAttribute", get_FirstAttribute, null);
		L.RegVar("HasAttributes", get_HasAttributes, null);
		L.RegVar("HasElements", get_HasElements, null);
		L.RegVar("IsEmpty", get_IsEmpty, null);
		L.RegVar("LastAttribute", get_LastAttribute, null);
		L.RegVar("Name", get_Name, set_Name);
		L.RegVar("NodeType", get_NodeType, null);
		L.RegVar("Value", get_Value, set_Value);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_Xml_Linq_XElement(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<System.Xml.Linq.XName>(L, 1))
			{
				System.Xml.Linq.XName arg0 = (System.Xml.Linq.XName)ToLua.ToObject(L, 1);
				System.Xml.Linq.XElement obj = new System.Xml.Linq.XElement(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Xml.Linq.XElement>(L, 1))
			{
				System.Xml.Linq.XElement arg0 = (System.Xml.Linq.XElement)ToLua.ToObject(L, 1);
				System.Xml.Linq.XElement obj = new System.Xml.Linq.XElement(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Xml.Linq.XStreamingElement>(L, 1))
			{
				System.Xml.Linq.XStreamingElement arg0 = (System.Xml.Linq.XStreamingElement)ToLua.ToObject(L, 1);
				System.Xml.Linq.XElement obj = new System.Xml.Linq.XElement(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				System.Xml.Linq.XName arg0 = (System.Xml.Linq.XName)ToLua.CheckObject(L, 1, typeof(System.Xml.Linq.XName));
				object arg1 = ToLua.ToVarObject(L, 2);
				System.Xml.Linq.XElement obj = new System.Xml.Linq.XElement(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Xml.Linq.XName>(L, 1) && TypeChecker.CheckParamsType<object>(L, 2, count - 1))
			{
				System.Xml.Linq.XName arg0 = (System.Xml.Linq.XName)ToLua.CheckObject(L, 1, typeof(System.Xml.Linq.XName));
				object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
				System.Xml.Linq.XElement obj = new System.Xml.Linq.XElement(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.Xml.Linq.XElement.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AncestorsAndSelf(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> o = obj.AncestorsAndSelf();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				System.Xml.Linq.XName arg0 = (System.Xml.Linq.XName)ToLua.CheckObject(L, 2, typeof(System.Xml.Linq.XName));
				System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> o = obj.AncestorsAndSelf(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Xml.Linq.XElement.AncestorsAndSelf");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Attribute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
			System.Xml.Linq.XName arg0 = (System.Xml.Linq.XName)ToLua.CheckObject(L, 2, typeof(System.Xml.Linq.XName));
			System.Xml.Linq.XAttribute o = obj.Attribute(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Attributes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> o = obj.Attributes();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				System.Xml.Linq.XName arg0 = (System.Xml.Linq.XName)ToLua.CheckObject(L, 2, typeof(System.Xml.Linq.XName));
				System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> o = obj.Attributes(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Xml.Linq.XElement.Attributes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DescendantNodesAndSelf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
			System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> o = obj.DescendantNodesAndSelf();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DescendantsAndSelf(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> o = obj.DescendantsAndSelf();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				System.Xml.Linq.XName arg0 = (System.Xml.Linq.XName)ToLua.CheckObject(L, 2, typeof(System.Xml.Linq.XName));
				System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> o = obj.DescendantsAndSelf(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Xml.Linq.XElement.DescendantsAndSelf");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDefaultNamespace(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
			System.Xml.Linq.XNamespace o = obj.GetDefaultNamespace();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNamespaceOfPrefix(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Xml.Linq.XNamespace o = obj.GetNamespaceOfPrefix(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPrefixOfNamespace(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
			System.Xml.Linq.XNamespace arg0 = (System.Xml.Linq.XNamespace)ToLua.CheckObject(L, 2, typeof(System.Xml.Linq.XNamespace));
			string o = obj.GetPrefixOfNamespace(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Xml.Linq.XElement o = System.Xml.Linq.XElement.Load(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.IO.Stream>(L, 1))
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.ToObject(L, 1);
				System.Xml.Linq.XElement o = System.Xml.Linq.XElement.Load(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.IO.TextReader>(L, 1))
			{
				System.IO.TextReader arg0 = (System.IO.TextReader)ToLua.ToObject(L, 1);
				System.Xml.Linq.XElement o = System.Xml.Linq.XElement.Load(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Xml.XmlReader>(L, 1))
			{
				System.Xml.XmlReader arg0 = (System.Xml.XmlReader)ToLua.ToObject(L, 1);
				System.Xml.Linq.XElement o = System.Xml.Linq.XElement.Load(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.Xml.Linq.LoadOptions>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Xml.Linq.LoadOptions arg1 = (System.Xml.Linq.LoadOptions)ToLua.ToObject(L, 2);
				System.Xml.Linq.XElement o = System.Xml.Linq.XElement.Load(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.IO.Stream, System.Xml.Linq.LoadOptions>(L, 1))
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.ToObject(L, 1);
				System.Xml.Linq.LoadOptions arg1 = (System.Xml.Linq.LoadOptions)ToLua.ToObject(L, 2);
				System.Xml.Linq.XElement o = System.Xml.Linq.XElement.Load(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.IO.TextReader, System.Xml.Linq.LoadOptions>(L, 1))
			{
				System.IO.TextReader arg0 = (System.IO.TextReader)ToLua.ToObject(L, 1);
				System.Xml.Linq.LoadOptions arg1 = (System.Xml.Linq.LoadOptions)ToLua.ToObject(L, 2);
				System.Xml.Linq.XElement o = System.Xml.Linq.XElement.Load(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Xml.XmlReader, System.Xml.Linq.LoadOptions>(L, 1))
			{
				System.Xml.XmlReader arg0 = (System.Xml.XmlReader)ToLua.ToObject(L, 1);
				System.Xml.Linq.LoadOptions arg1 = (System.Xml.Linq.LoadOptions)ToLua.ToObject(L, 2);
				System.Xml.Linq.XElement o = System.Xml.Linq.XElement.Load(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Xml.Linq.XElement.Load");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Parse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Xml.Linq.XElement o = System.Xml.Linq.XElement.Parse(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Xml.Linq.LoadOptions arg1 = (System.Xml.Linq.LoadOptions)ToLua.CheckObject(L, 2, typeof(System.Xml.Linq.LoadOptions));
				System.Xml.Linq.XElement o = System.Xml.Linq.XElement.Parse(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Xml.Linq.XElement.Parse");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
			obj.RemoveAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAttributes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
			obj.RemoveAttributes();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplaceAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				obj.ReplaceAll(arg0);
				return 0;
			}
			else if (TypeChecker.CheckTypes<System.Xml.Linq.XElement>(L, 1) && TypeChecker.CheckParamsType<object>(L, 2, count - 1))
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				object[] arg0 = ToLua.ToParamsObject(L, 2, count - 1);
				obj.ReplaceAll(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Xml.Linq.XElement.ReplaceAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplaceAttributes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				obj.ReplaceAttributes(arg0);
				return 0;
			}
			else if (TypeChecker.CheckTypes<System.Xml.Linq.XElement>(L, 1) && TypeChecker.CheckParamsType<object>(L, 2, count - 1))
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				object[] arg0 = ToLua.ToParamsObject(L, 2, count - 1);
				obj.ReplaceAttributes(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Xml.Linq.XElement.ReplaceAttributes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Save(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.Save(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.IO.Stream>(L, 2))
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.ToObject(L, 2);
				obj.Save(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.IO.TextWriter>(L, 2))
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				System.IO.TextWriter arg0 = (System.IO.TextWriter)ToLua.ToObject(L, 2);
				obj.Save(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Xml.XmlWriter>(L, 2))
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				System.Xml.XmlWriter arg0 = (System.Xml.XmlWriter)ToLua.ToObject(L, 2);
				obj.Save(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.Xml.Linq.SaveOptions>(L, 2))
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Xml.Linq.SaveOptions arg1 = (System.Xml.Linq.SaveOptions)ToLua.ToObject(L, 3);
				obj.Save(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.IO.Stream, System.Xml.Linq.SaveOptions>(L, 2))
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.ToObject(L, 2);
				System.Xml.Linq.SaveOptions arg1 = (System.Xml.Linq.SaveOptions)ToLua.ToObject(L, 3);
				obj.Save(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.IO.TextWriter, System.Xml.Linq.SaveOptions>(L, 2))
			{
				System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
				System.IO.TextWriter arg0 = (System.IO.TextWriter)ToLua.ToObject(L, 2);
				System.Xml.Linq.SaveOptions arg1 = (System.Xml.Linq.SaveOptions)ToLua.ToObject(L, 3);
				obj.Save(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Xml.Linq.XElement.Save");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAttributeValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
			System.Xml.Linq.XName arg0 = (System.Xml.Linq.XName)ToLua.CheckObject(L, 2, typeof(System.Xml.Linq.XName));
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.SetAttributeValue(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetElementValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
			System.Xml.Linq.XName arg0 = (System.Xml.Linq.XName)ToLua.CheckObject(L, 2, typeof(System.Xml.Linq.XName));
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.SetElementValue(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.SetValue(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)ToLua.CheckObject<System.Xml.Linq.XElement>(L, 1);
			System.Xml.XmlWriter arg0 = (System.Xml.XmlWriter)ToLua.CheckObject<System.Xml.XmlWriter>(L, 2);
			obj.WriteTo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EmptySequence(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Xml.Linq.XElement.EmptySequence);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FirstAttribute(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)o;
			System.Xml.Linq.XAttribute ret = obj.FirstAttribute;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FirstAttribute on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HasAttributes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)o;
			bool ret = obj.HasAttributes;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HasAttributes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HasElements(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)o;
			bool ret = obj.HasElements;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HasElements on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsEmpty(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)o;
			bool ret = obj.IsEmpty;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsEmpty on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LastAttribute(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)o;
			System.Xml.Linq.XAttribute ret = obj.LastAttribute;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LastAttribute on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)o;
			System.Xml.Linq.XName ret = obj.Name;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NodeType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)o;
			System.Xml.XmlNodeType ret = obj.NodeType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NodeType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Value(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)o;
			string ret = obj.Value;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Value on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)o;
			System.Xml.Linq.XName arg0 = (System.Xml.Linq.XName)ToLua.CheckObject(L, 2, typeof(System.Xml.Linq.XName));
			obj.Name = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Value(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XElement obj = (System.Xml.Linq.XElement)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Value = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Value on a nil value");
		}
	}
}

