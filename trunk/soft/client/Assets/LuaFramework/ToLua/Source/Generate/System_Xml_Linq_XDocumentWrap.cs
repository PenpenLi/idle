//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Xml_Linq_XDocumentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Xml.Linq.XDocument), typeof(System.Xml.Linq.XContainer));
		L.RegFunction("Load", Load);
		L.RegFunction("Parse", Parse);
		L.RegFunction("Save", Save);
		L.RegFunction("WriteTo", WriteTo);
		L.RegFunction("New", _CreateSystem_Xml_Linq_XDocument);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Declaration", get_Declaration, set_Declaration);
		L.RegVar("DocumentType", get_DocumentType, null);
		L.RegVar("NodeType", get_NodeType, null);
		L.RegVar("Root", get_Root, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_Xml_Linq_XDocument(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				System.Xml.Linq.XDocument obj = new System.Xml.Linq.XDocument();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Xml.Linq.XDocument>(L, 1))
			{
				System.Xml.Linq.XDocument arg0 = (System.Xml.Linq.XDocument)ToLua.ToObject(L, 1);
				System.Xml.Linq.XDocument obj = new System.Xml.Linq.XDocument(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Xml.Linq.XDeclaration>(L, 1) && TypeChecker.CheckParamsType<object>(L, 2, count - 1))
			{
				System.Xml.Linq.XDeclaration arg0 = (System.Xml.Linq.XDeclaration)ToLua.ToObject(L, 1);
				object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
				System.Xml.Linq.XDocument obj = new System.Xml.Linq.XDocument(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (TypeChecker.CheckParamsType<object>(L, 1, count))
			{
				object[] arg0 = ToLua.ToParamsObject(L, 1, count);
				System.Xml.Linq.XDocument obj = new System.Xml.Linq.XDocument(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.Xml.Linq.XDocument.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Xml.Linq.XDocument o = System.Xml.Linq.XDocument.Load(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.IO.Stream>(L, 1))
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.ToObject(L, 1);
				System.Xml.Linq.XDocument o = System.Xml.Linq.XDocument.Load(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.IO.TextReader>(L, 1))
			{
				System.IO.TextReader arg0 = (System.IO.TextReader)ToLua.ToObject(L, 1);
				System.Xml.Linq.XDocument o = System.Xml.Linq.XDocument.Load(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Xml.XmlReader>(L, 1))
			{
				System.Xml.XmlReader arg0 = (System.Xml.XmlReader)ToLua.ToObject(L, 1);
				System.Xml.Linq.XDocument o = System.Xml.Linq.XDocument.Load(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.Xml.Linq.LoadOptions>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Xml.Linq.LoadOptions arg1 = (System.Xml.Linq.LoadOptions)ToLua.ToObject(L, 2);
				System.Xml.Linq.XDocument o = System.Xml.Linq.XDocument.Load(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.IO.Stream, System.Xml.Linq.LoadOptions>(L, 1))
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.ToObject(L, 1);
				System.Xml.Linq.LoadOptions arg1 = (System.Xml.Linq.LoadOptions)ToLua.ToObject(L, 2);
				System.Xml.Linq.XDocument o = System.Xml.Linq.XDocument.Load(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.IO.TextReader, System.Xml.Linq.LoadOptions>(L, 1))
			{
				System.IO.TextReader arg0 = (System.IO.TextReader)ToLua.ToObject(L, 1);
				System.Xml.Linq.LoadOptions arg1 = (System.Xml.Linq.LoadOptions)ToLua.ToObject(L, 2);
				System.Xml.Linq.XDocument o = System.Xml.Linq.XDocument.Load(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Xml.XmlReader, System.Xml.Linq.LoadOptions>(L, 1))
			{
				System.Xml.XmlReader arg0 = (System.Xml.XmlReader)ToLua.ToObject(L, 1);
				System.Xml.Linq.LoadOptions arg1 = (System.Xml.Linq.LoadOptions)ToLua.ToObject(L, 2);
				System.Xml.Linq.XDocument o = System.Xml.Linq.XDocument.Load(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Xml.Linq.XDocument.Load");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Parse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Xml.Linq.XDocument o = System.Xml.Linq.XDocument.Parse(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Xml.Linq.LoadOptions arg1 = (System.Xml.Linq.LoadOptions)ToLua.CheckObject(L, 2, typeof(System.Xml.Linq.LoadOptions));
				System.Xml.Linq.XDocument o = System.Xml.Linq.XDocument.Parse(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Xml.Linq.XDocument.Parse");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Save(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				System.Xml.Linq.XDocument obj = (System.Xml.Linq.XDocument)ToLua.CheckObject<System.Xml.Linq.XDocument>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.Save(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.IO.Stream>(L, 2))
			{
				System.Xml.Linq.XDocument obj = (System.Xml.Linq.XDocument)ToLua.CheckObject<System.Xml.Linq.XDocument>(L, 1);
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.ToObject(L, 2);
				obj.Save(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.IO.TextWriter>(L, 2))
			{
				System.Xml.Linq.XDocument obj = (System.Xml.Linq.XDocument)ToLua.CheckObject<System.Xml.Linq.XDocument>(L, 1);
				System.IO.TextWriter arg0 = (System.IO.TextWriter)ToLua.ToObject(L, 2);
				obj.Save(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Xml.XmlWriter>(L, 2))
			{
				System.Xml.Linq.XDocument obj = (System.Xml.Linq.XDocument)ToLua.CheckObject<System.Xml.Linq.XDocument>(L, 1);
				System.Xml.XmlWriter arg0 = (System.Xml.XmlWriter)ToLua.ToObject(L, 2);
				obj.Save(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.Xml.Linq.SaveOptions>(L, 2))
			{
				System.Xml.Linq.XDocument obj = (System.Xml.Linq.XDocument)ToLua.CheckObject<System.Xml.Linq.XDocument>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Xml.Linq.SaveOptions arg1 = (System.Xml.Linq.SaveOptions)ToLua.ToObject(L, 3);
				obj.Save(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.IO.Stream, System.Xml.Linq.SaveOptions>(L, 2))
			{
				System.Xml.Linq.XDocument obj = (System.Xml.Linq.XDocument)ToLua.CheckObject<System.Xml.Linq.XDocument>(L, 1);
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.ToObject(L, 2);
				System.Xml.Linq.SaveOptions arg1 = (System.Xml.Linq.SaveOptions)ToLua.ToObject(L, 3);
				obj.Save(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.IO.TextWriter, System.Xml.Linq.SaveOptions>(L, 2))
			{
				System.Xml.Linq.XDocument obj = (System.Xml.Linq.XDocument)ToLua.CheckObject<System.Xml.Linq.XDocument>(L, 1);
				System.IO.TextWriter arg0 = (System.IO.TextWriter)ToLua.ToObject(L, 2);
				System.Xml.Linq.SaveOptions arg1 = (System.Xml.Linq.SaveOptions)ToLua.ToObject(L, 3);
				obj.Save(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Xml.Linq.XDocument.Save");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Xml.Linq.XDocument obj = (System.Xml.Linq.XDocument)ToLua.CheckObject<System.Xml.Linq.XDocument>(L, 1);
			System.Xml.XmlWriter arg0 = (System.Xml.XmlWriter)ToLua.CheckObject<System.Xml.XmlWriter>(L, 2);
			obj.WriteTo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Declaration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XDocument obj = (System.Xml.Linq.XDocument)o;
			System.Xml.Linq.XDeclaration ret = obj.Declaration;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Declaration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DocumentType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XDocument obj = (System.Xml.Linq.XDocument)o;
			System.Xml.Linq.XDocumentType ret = obj.DocumentType;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DocumentType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NodeType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XDocument obj = (System.Xml.Linq.XDocument)o;
			System.Xml.XmlNodeType ret = obj.NodeType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NodeType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Root(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XDocument obj = (System.Xml.Linq.XDocument)o;
			System.Xml.Linq.XElement ret = obj.Root;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Root on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Declaration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XDocument obj = (System.Xml.Linq.XDocument)o;
			System.Xml.Linq.XDeclaration arg0 = (System.Xml.Linq.XDeclaration)ToLua.CheckObject<System.Xml.Linq.XDeclaration>(L, 2);
			obj.Declaration = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Declaration on a nil value");
		}
	}
}

